./project/abader/Cataract/backend main* ❯ tree .                                                                                                        06:09:04 PM
├── app.py
├── config.py
├── Dockerfile
├── entrypoint.sh
├── migrations
│   ├── alembic.ini
│   ├── env.py
│   ├── __pycache__
│   │   └── env.cpython-310.pyc
│   ├── README
│   ├── script.py.mako
│   └── versions
│       ├── a7cd75ce975f_initial_migration.py
│       └── __pycache__
│           └── a7cd75ce975f_initial_migration.cpython-310.pyc
├── models.py
├── __pycache__
│   ├── app.cpython-310.pyc
│   ├── config.cpython-310.pyc
│   └── models.cpython-310.pyc
├── requirements.txt
├── routes
│   ├── ai.py
│   ├── auth.py
│   ├── doctors.py
│   ├── model.h5
│   ├── __pycache__
│   │   ├── ai.cpython-310.pyc
│   │   ├── auth.cpython-310.pyc
│   │   └── doctors.cpython-310.pyc
│   └── yolo
│       ├── coco.names
│       ├── yolov3.cfg
│       └── yolov3.weights
└── upload
    ├── aba23ad8-4868-4e65-832e-bd360599ea49_1.png
    ├── image_1740582547.jpeg
    ├── image_1740582562.jpeg
    ├── image_1740582887.jpeg
    ├── image_1740582905.jpeg
    ├── image_1741101628.jpeg
    ├── image_1741101642.jpeg
    ├── image_1741101645.jpeg
    ├── image_1741102701.jpeg
    ├── image_1741102719.jpeg
    ├── image_1741186976.jpeg
    ├── image_1741186979.jpeg
    ├── image_1741187024.jpeg
    ├── image_1741442063.jpeg
    ├── image_1741442110.jpeg
    ├── image_1741442641.jpeg
    ├── image_1741442706.jpeg
    ├── image_1741443335.jpeg
    ├── image_1741444997.jpeg
    ├── image_1741445034.jpeg
    ├── image_1741448184.jpeg
    ├── image_1741448682.jpeg
    ├── image_1741448934.jpeg
    ├── image_1741449036.jpeg
    ├── image_1741449073.png
    ├── image_1741453105.jpeg
    ├── image_1741456490.jpeg
    ├── image_1741529437.jpeg
    ├── image_1741529451.png
    ├── image_1741705406.jpeg
    ├── image_1741705417.jpeg
    ├── image_1741705423.png
    ├── image_1741705431.jpeg
    ├── image_1741705456.jpeg
    ├── image_1741705470.jpeg
    ├── image_1741706345.jpeg
    ├── image_1741706363.jpeg
    ├── image_1741706375.png
    ├── image_1741706389.jpeg
    ├── image_1741706867.jpeg
    ├── image_1741706873.jpeg
    ├── image_1741706880.jpeg
    ├── image_1741706891.jpeg
    ├── image_1741706900.jpeg
    ├── image_1741706903.jpeg
    ├── image_1741706911.jpeg
    ├── image_1741706922.jpeg
    ├── image_1741706992.jpeg
    ├── image_1741707008.jpeg
    ├── image_1741707017.jpeg
    ├── image_1741707028.jpeg
    ├── image_1741707043.jpeg
    ├── image_1741707059.jpeg
    ├── image_1741708741.jpeg
    ├── image_1741708810.jpeg
    ├── image_1741708914.jpeg
    ├── image_1741708946.jpeg
    ├── image_1741708978.jpeg
    ├── image_1741708997.jpeg
    ├── image_1741709026.jpeg
    ├── image_1741709221.jpeg
    ├── image_1741709281.jpeg
    ├── WhatsApp_Image_2024-10-23_at_9.50.00_PM.jpeg
    ├── WhatsApp_Image_2024-10-23_at_9.50.01_PM_2.jpeg
    ├── WhatsApp_Image_2024-10-23_at_9.50.01_PM.jpeg
    ├── WhatsApp_Image_2024-10-23_at_9.52.03_PM.jpeg
    ├── WhatsApp_Image_2024-10-23_at_9.52.19_PM_1.jpeg
    ├── WhatsApp_Image_2024-10-23_at_9.53.54_PM.jpeg
    ├── WhatsApp_Image_2024-10-23_at_9.53.55_PM_1.jpeg
    └── WhatsApp_Image_2024-12-07_at_3.08.45_PM.jpeg

10 directories, 96 files


___________________
# models yolov

https://github.com/patrick013/Object-Detection---Yolov3/blob/master/model/yolov3.weights
https://github.com/pjreddie/darknet/blob/master/cfg/yolov3.cfg
https://github.com/pjreddie/darknet/blob/master/data/coco.names
______________________
Flask
Flask-SQLAlchemy
Flask-Migrate
Flask-JWT-Extended
Flask-Cors
python-dotenv
PyMySQL
tensorflow
Pillow
numpy
Werkzeug
opencv-python
Flask-Limiter
gunicorn
cryptography
___________
# models.py
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class User(db.Model):
    __tablename__ = 'user'
    id = db.Column(db.Integer, primary_key=True)
    first_name = db.Column(db.String(50), nullable=False)
    last_name = db.Column(db.String(50), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(255), nullable=False)
    role = db.Column(db.String(20), nullable=False, default='patient')
    profile = db.relationship('Profile', backref='user', uselist=False)
    patient_details = db.relationship('PatientDetails', backref='user', lazy='dynamic')

class Profile(db.Model):
    __tablename__ = 'profile'
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    about = db.Column(db.Text)
    qualification = db.Column(db.String(255))
    url_picture_profile = db.Column(db.String(255))
    url_whatsapp = db.Column(db.String(255))
    url_facebook = db.Column(db.String(255))
    url_instagram = db.Column(db.String(255))
    url_website = db.Column(db.String(255))
    state = db.Column(db.String(50))

class PatientDetails(db.Model):
    __tablename__ = 'patient_details'
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    image_url = db.Column(db.String(255), nullable=False)
    percentage = db.Column(db.Float, nullable=False)
    status = db.Column(db.String(50), nullable=False)
    created_at = db.Column(db.DateTime, default=db.func.current_timestamp())
 ________________
 # /backend/routes/config.py

 import os
 from dotenv import load_dotenv

 basedir = os.path.abspath(os.path.dirname(__file__))
 load_dotenv(os.path.join(basedir, '.env'))

 class Config:
     SQLALCHEMY_DATABASE_URI = os.getenv('DATABASE_URL')
     SQLALCHEMY_TRACK_MODIFICATIONS = False
     JWT_SECRET_KEY = os.getenv('JWT_SECRET_KEY')
     MAX_CONTENT_LENGTH = 10 * 1024 * 1024  # 10MB image limit
_________________
# app.py
from flask import Flask, send_from_directory
from flask_migrate import Migrate
from flask_jwt_extended import JWTManager
from models import db, User
from routes.auth import auth_bp
from routes.ai import ai_bp
from routes.doctors import doctors_bp
from flask_cors import CORS
import os
from werkzeug.security import generate_password_hash
from sqlalchemy import inspect

app = Flask(__name__)
CORS(app)
app.config.from_object('config.Config')

# Initialize extensions
db.init_app(app)
migrate = Migrate(app, db)
jwt = JWTManager(app)

# Register blueprints
app.register_blueprint(auth_bp, url_prefix='/api')
app.register_blueprint(ai_bp, url_prefix='/api')
app.register_blueprint(doctors_bp, url_prefix='/api')

# Set up uploads folder
UPLOAD_FOLDER = os.path.join(app.root_path, 'upload')
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

@app.route('/uploads/<filename>')
def uploaded_file(filename):
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

# Initialize admin user on app startup
def init_admin():
    with app.app_context():
        admin_email = 'admin@eye.com'
        if not User.query.filter_by(email=admin_email).first():
            admin = User(
                first_name='Admin',
                last_name='User',
                email=admin_email,
                password=generate_password_hash('admin'),
                role='admin'
            )
            db.session.add(admin)
            db.session.commit()
            print("Admin user created.")

def init_admin_safe():
    with app.app_context():
        inspector = inspect(db.engine)
        if inspector.has_table("user"):
            init_admin()
        else:
            print("User table not found; skipping admin initialization.")


# Run init_admin when the app starts
init_admin_safe()

if __name__ == '__main__':
    app.run(debug=True)
________________
# doctors.py
from flask import Blueprint, jsonify, request
from models import db, User, Profile
from flask_jwt_extended import jwt_required, get_jwt_identity, get_jwt
from werkzeug.security import generate_password_hash

doctors_bp = Blueprint('doctors', __name__)

def check_admin():
    claims = get_jwt()
    if claims.get('role') != 'admin':
        return jsonify(msg="Admin access required"), 403
    return None

def doctor_to_json(doctor):
    profile = doctor.profile  # Using relationship directly
    return {
        'id': doctor.id,
        'first_name': doctor.first_name,
        'last_name': doctor.last_name,
        'email': doctor.email,
        'profile': {
            'about': profile.about if profile else '',
            'qualification': profile.qualification if profile else '',
            'state': profile.state if profile else '',
            'url_picture_profile': profile.url_picture_profile if profile else '',
            'url_whatsapp': profile.url_whatsapp if profile else '',
            'url_facebook': profile.url_facebook if profile else '',
            'url_instagram': profile.url_instagram if profile else '',
            'url_website': profile.url_website if profile else ''
        }
    }

@doctors_bp.route('/doctors', methods=['GET', 'OPTIONS'])
def get_all_doctors():
    state = request.args.get('state', '').strip()

    query = User.query.filter_by(role='doctor')

    if state:
        # Join with Profile and filter by state
        query = query.join(Profile).filter(Profile.state.ilike(f'%{state}%'))

    doctors = query.options(db.joinedload(User.profile)).all()

    return jsonify([doctor_to_json(d) for d in doctors])

@doctors_bp.route('/doctors/<int:doctor_id>', methods=['GET'])
def get_single_doctor(doctor_id):
    doctor = User.query.options(db.joinedload(User.profile))\
        .filter_by(id=doctor_id, role='doctor').first()

    if not doctor:
        return jsonify(msg="Doctor not found"), 404

    return jsonify(doctor_to_json(doctor))

@doctors_bp.route('/doctors', methods=['POST'])
@jwt_required()
def create_doctor():
    if (admin_check := check_admin()):
        return admin_check

    data = request.get_json()

    if User.query.filter_by(email=data.get('email')).first():
        return jsonify(msg="Email already exists"), 409

    try:
        # Create user
        new_doctor = User(
            first_name=data['first_name'],
            last_name=data['last_name'],
            email=data['email'],
            password=generate_password_hash(data.get('password', 'defaultpassword')),
            role='doctor'
        )
        db.session.add(new_doctor)
        db.session.flush()  # Get the ID before commit
        profile_data = data.get('profile', {})
        # Create profile with all fields
        profile = Profile(
            user_id=new_doctor.id,
            about=profile_data.get('about', ''),
            qualification=profile_data.get('qualification', ''),
            state=profile_data.get('state', ''),
            url_picture_profile=profile_data.get('url_picture_profile', ''),
            url_whatsapp=profile_data.get('url_whatsapp', ''),
            url_facebook=profile_data.get('url_facebook', ''),
            url_instagram=profile_data.get('url_instagram', ''),
            url_website=profile_data.get('url_website', '')
        )
        db.session.add(profile)
        db.session.commit()

        return jsonify(doctor_to_json(new_doctor)), 201

    except Exception as e:
        db.session.rollback()
        return jsonify(msg=f"Error creating doctor: {str(e)}"), 500

@doctors_bp.route('/doctors/<int:doctor_id>', methods=['PUT'])
@jwt_required()
def update_doctor(doctor_id):
    if (admin_check := check_admin()):
        return admin_check

    doctor = User.query.options(db.joinedload(User.profile))\
        .filter_by(id=doctor_id, role='doctor').first()

    if not doctor:
        return jsonify(msg="Doctor not found"), 404

    data = request.get_json()

    try:
        # Update user fields
        if 'first_name' in data:
            doctor.first_name = data['first_name']
        if 'last_name' in data:
            doctor.last_name = data['last_name']
        if 'email' in data:
            doctor.email = data['email']
        if 'password' in data:
            doctor.password = generate_password_hash(data['password'])
        profile_data = data.get('profile', {})

        # Update or create profile
        profile = doctor.profile or Profile(user_id=doctor.id)
        fields = ['about', 'qualification', 'state',
                  'url_picture_profile', 'url_whatsapp',
                  'url_facebook', 'url_instagram', 'url_website']

        for field in fields:
            if field in profile_data:
                setattr(profile, field, profile_data[field])

        if not doctor.profile:
            db.session.add(profile)

        db.session.commit()
        return jsonify(doctor_to_json(doctor)), 200

    except Exception as e:
        db.session.rollback()
        return jsonify(msg=f"Error updating doctor: {str(e)}"), 500


@doctors_bp.route('/doctors/<int:doctor_id>', methods=['DELETE'])
@jwt_required()
def delete_doctor(doctor_id):
    admin_check = check_admin()
    if admin_check:
        return admin_check

    # Fetch the doctor with its profile
    doctor = User.query.filter_by(id=doctor_id, role='doctor').first()
    if not doctor:
        return jsonify(msg="Doctor not found"), 404

    try:
        # Delete the associated profile first, if it exists
        if doctor.profile:
            db.session.delete(doctor.profile)

        # Then delete the doctor
        db.session.delete(doctor)
        db.session.commit()
        return jsonify(msg="Doctor deleted successfully"), 200
    except Exception as e:
        db.session.rollback()
        return jsonify(msg=f"Error deleting doctor: {str(e)}"), 500

____________________
# auth.py
from flask import Blueprint, jsonify, request
from flask_jwt_extended import create_access_token, jwt_required, get_jwt_identity
from werkzeug.security import generate_password_hash, check_password_hash
from models import db, User

auth_bp = Blueprint('auth', __name__)

@auth_bp.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    if User.query.filter_by(email=data['email']).first():
        return jsonify(msg="Email already exists"), 409
    try:
        new_user = User(
            first_name=data['first_name'],
            last_name=data['last_name'],
            email=data['email'],
            password=generate_password_hash(data['password']),
            role='patient'
        )
        db.session.add(new_user)
        db.session.commit()
    except Exception as e:
        db.session.rollback()
        return jsonify(msg="Registration error"), 500
    return jsonify(msg="User created"), 201

@auth_bp.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    user = User.query.filter_by(email=data['email']).first()
    if not user or not check_password_hash(user.password, data['password']):
        return jsonify(msg="Invalid credentials"), 401
    access_token = create_access_token(identity=str(user.id), additional_claims={'role': user.role})
    return jsonify(access_token=access_token, role=user.role), 200


________________
# routes/ai.py
from flask import Blueprint, jsonify, request, current_app, url_for
from PIL import Image
import numpy as np
import tensorflow as tf
from models import db, PatientDetails
from flask_jwt_extended import jwt_required, get_jwt_identity
from werkzeug.utils import secure_filename
import os
import time
import logging
import cv2

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

ai_bp = Blueprint('ai', __name__)

# Load model only once at startup
BASE_DIR = os.path.abspath(os.path.dirname(__file__))
model_path = os.path.join(BASE_DIR, 'model.h5')
try:
    model = tf.keras.models.load_model(model_path)
    logger.info("Model loaded successfully")
except Exception as e:
    logger.error(f"Failed to load model: {str(e)}")
    raise

# Load YOLO model
net = cv2.dnn.readNet(os.path.join(BASE_DIR, "yolo/yolov3.weights"), os.path.join(BASE_DIR, "yolo/yolov3.cfg"))
layer_names = net.getLayerNames()
unconnected_out_layers = net.getUnconnectedOutLayers()
if isinstance(unconnected_out_layers, np.ndarray):
    unconnected_out_layers = unconnected_out_layers.flatten()
output_layers = [layer_names[i - 1] for i in unconnected_out_layers]
with open(os.path.join(BASE_DIR, "yolo/coco.names"), "r") as f:
    classes = [line.strip() for line in f.readlines()]

# Load Haar Cascades for face and eye detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')

def preprocess_image(image_path):
    """Preprocess the image by cropping to the face region if a face is detected."""
    image = cv2.imread(image_path)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)

    if len(faces) > 0:
        # Crop to the first detected face
        x, y, w, h = faces[0]
        face_image = image[y:y+h, x:x+w]
        height, width, channels = face_image.shape
        blob = cv2.dnn.blobFromImage(face_image, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
        return face_image, blob, height, width
    else:
        # Use the original image if no face is detected
        height, width, channels = image.shape
        blob = cv2.dnn.blobFromImage(image, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
        return image, blob, height, width

def detect_objects(image_path):
    """Detect eyes using YOLO, with a fallback to Haar Cascade if YOLO fails."""
    image, blob, height, width = preprocess_image(image_path)
    net.setInput(blob)
    outs = net.forward(output_layers)

    class_ids = []
    confidences = []
    boxes = []

    # YOLO detection
    for out in outs:
        for detection in out:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.5 and classes[class_id] == "eye":
                center_x = int(detection[0] * width)
                center_y = int(detection[1] * height)
                w = int(detection[2] * width)
                h = int(detection[3] * height)
                x = max(0, int(center_x - w / 2))
                y = max(0, int(center_y - h / 2))
                boxes.append([x, y, w, h])
                confidences.append(float(confidence))
                class_ids.append(class_id)

    indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)
    if len(indexes) > 0:
        # Use the first detected eye from YOLO
        i = indexes[0]
        x, y, w, h = boxes[i]
        eye_image = image[y:y+h, x:x+w]
        return True, eye_image
    else:
        # Fallback to Haar Cascade eye detection
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        eyes = eye_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)
        if len(eyes) > 0:
            # Use the first detected eye
            x, y, w, h = eyes[0]
            eye_image = image[y:y+h, x:x+w]
            return True, eye_image
        return False, None

@ai_bp.route('/predict', methods=['POST'])
@jwt_required()
def predict_image():
    """Handle image upload, detect eyes, and predict cataract status."""
    if 'image' not in request.files:
        return jsonify(error="No image provided"), 400

    image_file = request.files['image']
    original_filename = secure_filename(image_file.filename)
    ext = os.path.splitext(original_filename)[1]
    new_filename = f"image_{int(time.time())}{ext}"

    upload_folder = current_app.config.get('UPLOAD_FOLDER')
    if not os.path.exists(upload_folder):
        os.makedirs(upload_folder, exist_ok=True)

    file_path = os.path.join(upload_folder, new_filename)
    image_file.save(file_path)

    # Detect eyes and get cropped eye image
    detected, eye_image = detect_objects(file_path)
    if not detected:
        return jsonify(error="Image needs to contain eyes"), 400

    file_url = url_for('uploaded_file', filename=new_filename, _external=True)

    try:
        # Convert OpenCV image (BGR) to PIL image (RGB) for CNN
        eye_image_pil = Image.fromarray(cv2.cvtColor(eye_image, cv2.COLOR_BGR2RGB))
        # Resize to 224x224 and normalize
        processed = np.array(eye_image_pil.resize((224, 224))) / 255.0
        processed = np.expand_dims(processed, axis=0)
        prediction = model.predict(processed)[0][0]
        prediction = float(prediction)
        status = "Normal" if prediction >= 0.5 else "Cataract"
        percentage = round(prediction * 100, 2)
        logger.info(f"Prediction: {prediction}, Status: {status}, Percentage: {percentage}")
    except Exception as e:
        logger.error(f"Image processing or prediction failed: {str(e)}")
        return jsonify(error=f"Prediction failed: {str(e)}"), 500

    user_id = get_jwt_identity()

    try:
        new_detail = PatientDetails(
            user_id=user_id,
            image_url=file_url,
            percentage=percentage,
            status=status
        )
        db.session.add(new_detail)
        db.session.commit()
        logger.info(f"Prediction saved for user {user_id}")
    except Exception as e:
        db.session.rollback()
        logger.error(f"Database error: {str(e)}")
        return jsonify(error=f"Database error: {str(e)}"), 500

    return jsonify({
        'status': status,
        'percentage': percentage,
        'image_url': file_url
    })

@ai_bp.route('/history', methods=['GET'])
@jwt_required()
def get_history():
    """Retrieve prediction history for the authenticated user."""
    user_id = get_jwt_identity()
    details = PatientDetails.query.filter_by(user_id=user_id).all()
    return jsonify([{
        'id': detail.id,
        'status': detail.status,
        'percentage': detail.percentage,
        'image_url': detail.image_url,
        'created_at': detail.created_at.isoformat() if hasattr(detail, 'created_at') else None
    } for detail in details]), 200