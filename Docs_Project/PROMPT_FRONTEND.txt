
======= File Structure =======

src
├── app
│   ├── dashboard
│   │   └── page.jsx
│   ├── doctors
│   │   ├── [id]
│   │   │   └── page.jsx
│   │   └── page.jsx
│   ├── favicon.ico
│   ├── globals.css
│   ├── history
│   │   └── page.jsx
│   ├── layout.js
│   ├── page.js
│   ├── Providers.jsx
│   ├── scan
│   │   └── page.jsx
│   ├── search
│   │   └── page.jsx
│   ├── signin
│   │   └── page.jsx
│   └── signup
│       └── page.jsx
├── components
│   ├── DoctorCard.jsx
│   ├── DoctorModal.jsx
│   ├── Footer.jsx
│   ├── HistoryCard.jsx
│   ├── Navbar.jsx
│   └── ui
│       ├── Button.jsx
│       ├── Input.jsx
│       ├── Logo.jsx
│       ├── Spinner.jsx
│       └── ThemeSwitch.jsx
└── lib
    ├── actions
    │   ├── signInActions.js
    │   └── signupActions.js
    ├── context
    │   └── auth.js
    ├── hooks
    │   ├── useDoctorActions.js
    │   └── useDoctors.js
    └── utils
        └── api.js

17 directories, 29 files

======= Appending src file contents =======

File: src/app/layout.js
------------------------
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import {Providers} from "@/app/Providers";
import Navbar from "@/components/Navbar";
import Footer from "@/components/Footer";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({ children }) {

  return (
      <html  suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
      <Providers>
          <Navbar />
         <main className="overflow-y-auto min-h-dvh w-full">
             {children}
         </main>
<Footer/>
      </Providers>
      </body>
    </html>
  );
}

__________

File: src/app/globals.css
------------------------
@import "tailwindcss";

@theme {
    --color-boston-blue-50: #ebfeff;
    --color-boston-blue-100: #cdfaff;
    --color-boston-blue-200: #a1f3ff;
    --color-boston-blue-300: #60e7ff;
    --color-boston-blue-400: #18d2f8;
    --color-boston-blue-500: #00b5de;
    --color-boston-blue-600: #008db7;
    --color-boston-blue-700: #087296;
    --color-boston-blue-800: #105c7a;
    --color-boston-blue-900: #124d67;
    --color-boston-blue-950: #053247;
}


:root {
    /* Your default theme */
    --background: white;
    --foreground: black;
}

[data-theme='dark'] {
    --background: black;
    --foreground: white;
}

/*body {*/
/*    @apply bg-white text-black dark:bg-[#0B0C0C] dark:text-white;*/
/*}*/

::-webkit-scrollbar {
    @apply w-0.5  ;
}


::-webkit-scrollbar-thumb {
    @apply bg-boston-blue-500;
}

.hero-container {
    mask-image: linear-gradient(180deg, rgba(0, 0, 0, 1) 0%, rgba(0, 0, 0, 1) 60%, rgba(0, 0, 0, 0) 99%);
}
__________

File: src/app/page.js
------------------------
import Link from 'next/link';
import Image from 'next/image';
import { Search, Camera, TrendingUp } from 'lucide-react';
export default function Home() {
  // Define your four feature items
  const features = [
    {
      id: 1,
      image: "/images/HOME_1.jpeg",
      title: "Fast Diagnosis",
      description: "Quickly analyze your eye images.",
    },
    {
      id: 2,
      image: "/images/HOME_2.jpeg",
      title: "Expert Doctors",
      description: "Access certified ophthalmologists.",
    },
    {
      id: 3,
      image: "/images/HOME_3.jpeg",
      title: "Secure Platform",
      description: "Your data is protected.",
    },
    {
      id: 4,
      image: "/images/HOME_4.jpeg",
      title: "User Friendly",
      description: "Easy and intuitive experience.",
    },
  ];

  return (
      <>
        <section className="flex justify-start items-center px-8 bg-fixed min-h-dvh w-full .hero-container bg-[url(../../public/images/HERO.jpeg)] bg-center bg-no-repeat bg-cover hero-container">
          <div className="flex flex-col items-start justify-center min-h-screen px-8 container">
            <h1 className="text-5xl text-boston-blue-300 uppercase font-extrabold">Hi, Cataract Site</h1>
            <p className="text-lg opacity-60">
              Early detection using advanced AI technology.
            </p>
          </div>
        </section>
        <section className="min-h-[60dvh] w-full flex flex-col items-center justify-center container mx-auto gap-4 pt-24">
          <h1 className="text-5xl text-boston-blue-300 uppercase font-extrabold">Features</h1>
          <hr className="h-px w-full bg-white my-8" />
          <div className="flex flex-wrap items-center justify-center mt-12">
            {features.map((feature) => (
                <div
                    key={feature.id}
                    className="flex flex-col justify-start items-start gap-4 bg-boston-blue-900/40 p-4 rounded-2xl backdrop-blur-lg m-4"
                >
                  <Image
                      src={feature.image}
                      alt={feature.title}
                      width={300}
                      height={350}
                      className="rounded-2xl object-cover"
                  />
                  <h1 className="text-3xl font-extrabold">{feature.title}</h1>
                  <p className="opacity-60">{feature.description}</p>
                </div>
            ))}
          </div>
        </section>
        <section className="py-16 my-24 bg-boston-blue-900/20 min-h-[60dvh] w-full">
          <div className="container mx-auto px-4 text-center">
            <h2 className="text-4xl font-bold mb-12">What We Offer</h2>
            <div className="flex flex-wrap justify-center gap-8 mt-28">
              <div className="flex flex-col items-center bg-boston-blue-900/40 rounded-2xl p-12">
                <Search size={48} className="text-boston-blue-700" />
                <h3 className="mt-4 text-2xl font-semibold">Search Doctors</h3>
                <p className="mt-2 text-sm">Find top specialists in your area.</p>
              </div>
              <div className="flex flex-col items-center bg-boston-blue-900/40 rounded-2xl p-12">

              <Camera size={48} className="text-boston-blue-700" />
                <h3 className="mt-4 text-2xl font-semibold">Scan Image</h3>
                <p className="mt-2 text-sm">Upload and get quick diagnosis.</p>
              </div>
              <div className="flex flex-col items-center bg-boston-blue-900/40 rounded-2xl p-12">

              <TrendingUp size={48} className="text-boston-blue-700" />
                <h3 className="mt-4 text-2xl font-semibold">Performance</h3>
                <p className="mt-2 text-sm">Fast and reliable results every time.</p>
              </div>
            </div>
          </div>
        </section>
      </>
  );
}

__________

File: src/app/Providers.jsx
------------------------
"use client"
import {AuthProvider} from "@/lib/context/auth";
import { useEffect, useState } from "react";
import {ThemeProvider as NextThemesProvider} from "next-themes";

export function Providers({children}) {
    const [mounted, setMounted] = useState(false);
    useEffect(() => setMounted(true), []);
    if (!mounted) return null; // Prevent SSR mismatch

    return (
        <AuthProvider>
            <NextThemesProvider attribute="class" defaultTheme="system" enableSystem>
            {children}
            </NextThemesProvider>
        </AuthProvider>
)
}

__________

File: src/app/signin/page.jsx
------------------------
"use client";

import {useEffect, useState} from "react";
import { useRouter } from "next/navigation";
import Logo from "@/components/ui/Logo";
import signInActions from "@/lib/actions/signInActions";
import { CircleUserRound, Lock } from "lucide-react";
import Button from "@/components/ui/Button";
import Input from "@/components/ui/Input";
import {useAuth} from "@/lib/context/auth";
import Link from "next/link";
export default function SignIn() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState("");
  const router = useRouter();
    const { login , user } = useAuth();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setMessage("");

    const result = await signInActions({ email, password });

    if (result.success) {

        const { access_token, role } = result.data;
        login({ email, role , token:access_token });
      router.push("/");
    } else {
      setMessage(result.message);
    }

    setLoading(false);
  };
    useEffect(() => {
        if(user){
            router.push("/");
        }
    },[user])
  return (
    <section className="min-h-dvh w-full grid place-content-center relative">
      <form
        onSubmit={handleSubmit}
        className="flex flex-col justify-start items-center p-4 w-[450px] min-h-[600px] bg-boston-blue-50/10 backdrop-blur-lg border-2 border-boston-blue-500 rounded-2xl z-10"
      >
        <Logo textSize="text-4xl" />
        <article className="w-full flex flex-col justify-between items-center h-full gap-4 mt-18">
<div className="flex flex-col w-full">
  <Input
      idInput="email"
      icon={CircleUserRound}
      type="email"
      placeholder="Email"
      value={email}
      onChange={(e) => setEmail(e.target.value)}
      required
  />
  <Input
      idInput="password"
      icon={Lock} // Remove or comment this line if you don't want an icon for password
      type="password"
      placeholder="Password"
      value={password}
      onChange={(e) => setPassword(e.target.value)}
      required
      containerClassName="mt-4" // Add margin or any additional styling
  />
</div>
          <Button
            type="submit"
            disabled={loading}
            className="w-full py-4 bg-boston-blue-700"
          >
            {loading ? "Signing in..." : "Sign In"}
          </Button>
        </article>
        {message && <p className="text-red-400 mt-3">{message}</p>}
<div className="w-full flex items-center gap-2 px-4 my-4">
    <hr className="h-px w-full bg-white"/>
<span>OR</span>
    <hr className="h-px w-full bg-white"/>
</div>
<Link href="/signup">
    <Button
    >
        signup
    </Button>
</Link>
      </form>
    </section>
  );
}

__________

File: src/app/signup/page.jsx
------------------------
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Logo from "@/components/ui/Logo";
import signupActions from "@/lib/actions/signupActions";
import { User, Mail, Lock } from "lucide-react";
import Button from "@/components/ui/Button";
import Input from "@/components/ui/Input";
import { useAuth } from "@/lib/context/auth";
import Link from "next/link";

export default function Signup() {
    const [firstName, setFirstName] = useState("");
    const [lastName, setLastName] = useState("");
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [loading, setLoading] = useState(false);
    const [message, setMessage] = useState("");
    const router = useRouter();
    const { user } = useAuth();

    // Redirect if user is already logged in
    useEffect(() => {
        if (user) {
            router.push("/");
        }
    }, [user]);

    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        setMessage("");

        const result = await signupActions({ firstName, lastName, email, password });

        if (result.success) {
            router.push("/signin");
        } else {
            setMessage(result.message);
        }

        setLoading(false);
    };

    return (
        <section className="min-h-dvh w-full grid place-content-center relative">
            <form
                onSubmit={handleSubmit}
                className="flex flex-col justify-start items-center p-4 w-[450px] min-h-[600px] bg-boston-blue-50/10 backdrop-blur-lg border-2 border-boston-blue-500 rounded-2xl z-10"
            >
                <Logo textSize="text-4xl" />
                <article className="w-full flex flex-col justify-between items-center h-full gap-4 mt-18">
                    <div className="flex flex-col w-full">
                        <Input
                            idInput="firstName"
                            icon={User}
                            type="text"
                            placeholder="First Name"
                            value={firstName}
                            onChange={(e) => setFirstName(e.target.value)}
                            required
                        />
                        <Input
                            idInput="lastName"
                            icon={User}
                            type="text"
                            placeholder="Last Name"
                            value={lastName}
                            onChange={(e) => setLastName(e.target.value)}
                            required
                            containerClassName="mt-4"
                        />
                        <Input
                            idInput="email"
                            icon={Mail}
                            type="email"
                            placeholder="Email"
                            value={email}
                            onChange={(e) => setEmail(e.target.value)}
                            required
                            containerClassName="mt-4"
                        />
                        <Input
                            idInput="password"
                            icon={Lock}
                            type="password"
                            placeholder="Password"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            required
                            containerClassName="mt-4"
                        />
                    </div>
                    <Button
                        type="submit"
                        disabled={loading}
                        className="w-full py-4 bg-boston-blue-700"
                    >
                        {loading ? "Signing up..." : "Sign Up"}
                    </Button>
                </article>
                {message && <p className="text-red-400 mt-3">{message}</p>}
                <div className="w-full flex items-center gap-2 px-4 my-4">
                    <hr className="h-px w-full bg-white" />
                    <span>OR</span>
                    <hr className="h-px w-full bg-white" />
                </div>
                <Link href="/signin">
                    <Button>Sign In</Button>
                </Link>
            </form>
        </section>
    );
}
__________

File: src/app/dashboard/page.jsx
------------------------
// src/app/dashboard/page.jsx
'use client'
import { useState } from "react";
import { useAuth } from "@/lib/context/auth";
import useDoctors from "@/lib/hooks/useDoctors";
import useDoctorActions from "@/lib/hooks/useDoctorActions";
import Button from "@/components/ui/Button";
import DoctorModal from "@/components/DoctorModal";
import { Trash, UserRoundPen , CirclePlus} from 'lucide-react';
import Spinner from "@/components/ui/Spinner";

export default function Dashboard() {
    const { user } = useAuth();
    const { doctors, loading: fetchLoading, error: fetchError, fetchDoctors } = useDoctors(user?.token);
    const { deleteDoctor, loading: actionLoading, error: actionError } = useDoctorActions(user?.token);
    const [showModal, setShowModal] = useState(false);
    const [editDoctor, setEditDoctor] = useState(null);

    const handleOpenModal = (doctor = null) => {
        setEditDoctor(doctor);
        setShowModal(true);
    };

    const handleCloseModal = () => {
        setEditDoctor(null);
        setShowModal(false);
    };

    const handleSaveDoctor = () => {
        fetchDoctors(); // Refresh the list after save
        handleCloseModal();
    };

    const handleDeleteDoctor = async (id) => {
        if (window.confirm("Are you sure you want to delete this doctor?")) {
            const result = await deleteDoctor(id);
            if (result.success) {
                fetchDoctors();
            }
        }
    };

    if (!user || user.role !== "admin") {
        return (
            <div className="min-h-dvh w-full grid place-content-center">
                <p>You must be an admin to access this page.</p>
            </div>
        );
    }

    if (fetchLoading) {
        return (
            <div className="min-h-dvh w-full grid place-content-center">
                <Spinner />
            </div>
        );
    }

    if (fetchError) {
        return (
            <div className="min-h-dvh w-full grid place-content-center">
                <p>Error: {fetchError}</p>
            </div>
        );
    }

    return (
        <section className="min-h-dvh w-full p-8 mt-28 gap-8 flex flex-col justify-start items-center relative">
<div className="flex justify-center items-center w-full gap-8">
    <h2 className="text-2xl font-bold ">Manage Doctors</h2>
    <Button onClick={() => handleOpenModal()} className="rounded-full !p-2">
        <CirclePlus/>
    </Button>
</div>
            {actionError && <p className="text-red-400 mb-3">{actionError}</p>}
            <hr className="h-px w-full bg-white"/>

            <div className="p-4 backdrop-blur-lg   w-full container ">
                <table className="w-full border-collapse min-w-[1000px]">
                    <thead className="bg-boston-blue-900/20 p-5">
                    <tr >
                        <th className="p-4 text-left">Profile Picture</th>
                        <th className="p-4 text-left">Name</th>
                        <th className="p-4 text-left">Email</th>
                        <th className="p-4 text-left">State</th>
                        <th className="p-4 text-left">Actions</th>
                    </tr>
                    </thead>
                    <tbody >
                    {doctors.map((doctor) => (
                        <tr key={doctor.id} className="border-b hover:bg-boston-blue-900/10 p-4 mb-2">
                            <td className="p-4">
                                {doctor.profile?.url_picture_profile ? (
                                    <img
                                        src={doctor.profile.url_picture_profile}
                                        alt="Profile"
                                        className="w-12 h-12 rounded-full object-cover"
                                    />
                                ) : "N/A"}
                            </td>
                            <td className="p-4">{`${doctor.first_name} ${doctor.last_name}`}</td>
                            <td className="p-4">{doctor.email}</td>
                            <td className="p-4">{doctor.profile?.state || "N/A"}</td>


                            <td className="p-4 flex gap-2">
                                <Button
                                    onClick={() => handleOpenModal(doctor)}
                                    disabled={actionLoading}
                                >
                                    <UserRoundPen/>
                                </Button>
                                <Button
                                    onClick={() => handleDeleteDoctor(doctor.id)}
                                    disabled={actionLoading}
                                >
                                   <Trash/>
                                </Button>
                            </td>
                        </tr>
                    ))}
                    </tbody>
                </table>
            </div>
            <DoctorModal
                show={showModal}
                onHide={handleCloseModal}
                onSave={handleSaveDoctor}
                doctor={editDoctor}
                token={user?.token}
            />
        </section>
    );
}
__________

File: src/app/search/page.jsx
------------------------
// src/app/search/page.jsx
"use client";

import { useState, useEffect } from "react";
import useDoctors from "@/lib/hooks/useDoctors";
import Button from "@/components/ui/Button";
import Input from "@/components/ui/Input";
import { Search as SearchIcon } from "lucide-react";
import Spinner from "@/components/ui/Spinner";
import DoctorCard from "@/components/DoctorCard";

export default function Search() {
    const [state, setState] = useState("");
    const { doctors, loading, error, fetchDoctors } = useDoctors(null); // No token needed for public search

    useEffect(() => {
        // Debounce fetching with a 500ms delay
        const delayDebounce = setTimeout(() => {
            if (state.trim()) {
                fetchDoctors(state)
                    .catch((err) => {
                        console.error("Fetch error:", err);
                    });
            }
        }, 500); // 500ms delay

        // Cleanup: Clear the timeout if state changes or component unmounts
        return () => {
            clearTimeout(delayDebounce);
        };
    }, [state, fetchDoctors]);

    const handleSearch = (e) => {
        e.preventDefault();
        // Trigger fetch immediately on button click (optional)
        if (state.trim()) {
            fetchDoctors(state);
        }
    };

    const handleInputChange = (e) => {
        setState(e.target.value); // Update state on every input change
    };

    return (
        <section className="min-h-dvh w-full p-8 mt-32 flex flex-col items-center">
            <h2 className="text-2xl font-bold mb-6 text-boston-blue-700">Search Doctors by State</h2>
            <form onSubmit={handleSearch} className="mb-8 w-full max-w-md">
                    <Input
                        idInput="state"
                        type="text"
                        placeholder="Enter state (e.g., Cairo)"
                        value={state}
                        onChange={handleInputChange}
                        required
                        icon={SearchIcon}
                    />
            </form>

            {error && <p className="text-red-400 mb-4">{error}</p>}

            {loading ? (
                <Spinner />
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 w-full max-w-5xl">
                    {doctors.length > 0 ? (
                        doctors.map((doc) => <DoctorCard key={doc.id} doctor={doc} />)
                    ) : (
                        <p className="text-center col-span-full">No doctors found for this state.</p>
                    )}
                </div>
            )}
        </section>
    );
}
__________

File: src/app/doctors/[id]/page.jsx
------------------------
// src/app/doctors/[id]/page.jsx
"use client";

import { useState, useEffect } from "react";
import { useParams } from "next/navigation";
import api from "@/lib/utils/api";
import Spinner from "@/components/ui/Spinner";
import Link from "next/link";
import {
    Facebook,
    Instagram,
    MessageCircle,
    Globe,
} from "lucide-react"; // Import icons from lucide-react

export default function DoctorProfile() {
    const [doctor, setDoctor] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const { id } = useParams();

    useEffect(() => {
        const fetchDoctor = async () => {
            setLoading(true);
            setError(null);
            try {
                const res = await api.get(`/doctors/${id}`);
                setDoctor(res.data);
            } catch (err) {
                setError(err.response?.data?.msg || "Failed to fetch doctor profile");
            } finally {
                setLoading(false);
            }
        };
        if (id) {
            fetchDoctor();
        }
    }, [id]);

    if (loading) {
        return (
            <div className="min-h-dvh w-full grid place-content-center">
                <Spinner />
            </div>
        );
    }

    if (error) {
        return (
            <div className="min-h-dvh w-full grid place-content-center">
                <p className="text-red-400">{error}</p>
            </div>
        );
    }

    if (!doctor) {
        return (
            <div className="min-h-dvh w-full grid place-content-center">
                <p>Doctor not found.</p>
            </div>
        );
    }

    return (
        <section className="min-h-dvh w-full p-8 flex justify-center items-center">
            <div className="p-4 bg-boston-blue-500/10 backdrop-blur-2xl rounded-2xl shadow-md transition-all w-full max-w-lg">
                <div className="flex items-center gap-6 mb-6">
                    {doctor.profile?.url_picture_profile ? (
                        <img
                            src={doctor.profile.url_picture_profile}
                            alt={`${doctor.first_name} ${doctor.last_name}`}
                            className="w-24 h-24 rounded-full object-cover"
                        />
                    ) : (
                        <div className="w-24 h-24 rounded-full bg-boston-blue-200 flex items-center justify-center text-white text-2xl font-bold">
                            {doctor.first_name[0]}{doctor.last_name[0]}
                        </div>
                    )}
                    <div>
                        <h2 className="text-2xl font-bold text-boston-blue-700">
                            {doctor.first_name} {doctor.last_name}
                        </h2>
                        <p className="text-lg">{doctor.email}</p>
                        <span className="bg-boston-blue-500 py-0.5 px-2 my-1 rounded-lg uppercase font-extrabold ">{doctor.profile?.state || "N/A"}</span>
                    </div>
                </div>
                <div className="space-y-4">
                    <p>
                        <strong>About:</strong> {doctor.profile?.about || "N/A"}
                    </p>
                    <p>
                        <strong>Qualification:</strong>{" "}
                        {doctor.profile?.qualification || "N/A"}
                    </p>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-1 my-6">
                        {doctor.profile?.url_whatsapp && (
                            <Link
                                href={doctor.profile.url_whatsapp}
                                target="_blank"
                                rel="noopener noreferrer"
                                className="flex justify-center items-center gap-2 py-1 px-4 bg-boston-blue-500  w-full hover:bg-boston-blue-600 transition-colors"
                            >
                                <MessageCircle size={28} />
                                <span className="uppercase font-extrabold text-2xl">WhatsApp</span>
                            </Link>
                        )}
                        {doctor.profile?.url_facebook && (
                            <Link
                                href={doctor.profile.url_facebook}
                                target="_blank"
                                rel="noopener noreferrer"
                                className="flex justify-center items-center gap-2 py-1 px-4 bg-boston-blue-500  w-full hover:bg-boston-blue-600 transition-colors"
                            >
                                <Facebook size={28} />
                                <span className="uppercase font-extrabold text-2xl">Facebook</span>
                            </Link>
                        )}
                        {doctor.profile?.url_instagram && (
                            <Link
                                href={doctor.profile.url_instagram}
                                target="_blank"
                                rel="noopener noreferrer"
                                className="flex justify-center items-center gap-2 py-1 px-4 bg-boston-blue-500  w-full hover:bg-boston-blue-600 transition-colors"
                            >
                                <Instagram size={28} />
                                <span className="uppercase font-extrabold text-2xl">Instagram</span>
                            </Link>
                        )}
                        {doctor.profile?.url_website && (
                            <Link
                                href={doctor.profile.url_website}
                                target="_blank"
                                rel="noopener noreferrer"
                                className="flex justify-center items-center gap-2 py-1 px-4 bg-boston-blue-500  w-full hover:bg-boston-blue-600 transition-colors"
                            >
                                <Globe size={28} />
                                <span className="uppercase font-extrabold text-2xl">Website</span>
                            </Link>
                        )}
                    </div>
                </div>
            </div>
        </section>
    );
}
__________

File: src/app/doctors/page.jsx
------------------------
// src/app/doctors/page.jsx
"use client";

import { useEffect } from "react";
import useDoctors from "@/lib/hooks/useDoctors";
import Spinner from "@/components/ui/Spinner";
import DoctorCard from "@/components/DoctorCard";

export default function DoctorsPage() {
    const { doctors, loading, error, fetchDoctors } = useDoctors(null); // No token needed for public search

    useEffect(() => {
        fetchDoctors(); // Fetch doctors when the component mounts
    }, [fetchDoctors]); // Dependency on fetchDoctors ensures it runs if the function changes

    if (loading) {
        return (
            <section className="min-h-dvh w-full p-8 flex justify-center items-center">
                <Spinner />
            </section>
        );
    }

    if (error) {
        return (
            <section className="min-h-dvh w-full p-8 flex justify-center items-center">
                <p className="text-red-400">{error}</p>
            </section>
        );
    }

    return (
        <section className="min-h-dvh w-full p-8 mt-32">
            <h1 className="text-3xl font-bold text-boston-blue-700 mb-6 text-center">
                Our Doctors
            </h1>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-5xl mx-auto">
                {doctors.length > 0 ? (
                    doctors.map((doctor) => (
                        <DoctorCard key={doctor.id} doctor={doctor} />
                    ))
                ) : (
                    <p className="text-center col-span-full">No doctors found.</p>
                )}
            </div>
        </section>
    );
}
__________

File: src/app/scan/page.jsx
------------------------
// src/app/scan/page.jsx
"use client";

import { useState } from "react";
import { useAuth } from "@/lib/context/auth";
import api from "@/lib/utils/api";
import Button from "@/components/ui/Button";
import Input from "@/components/ui/Input";
import Spinner from "@/components/ui/Spinner";
import { Upload } from "lucide-react";
import HistoryCard from "@/components/HistoryCard";

export default function Scan() {
    const [image, setImage] = useState(null); // Selected file
    const [previewUrl, setPreviewUrl] = useState(null); // Local preview URL
    const [result, setResult] = useState(null); // Backend response
    const [message, setMessage] = useState("");
    const [loading, setLoading] = useState(false);
    const { user } = useAuth();

    const handleImageChange = (e) => {
        const file = e.target.files[0];
        if (file) {
            setImage(file);
            // Create a local URL for preview
            const url = URL.createObjectURL(file);
            setPreviewUrl(url);
        }
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!image) {
            setMessage("Please select an image.");
            return;
        }

        const formData = new FormData();
        formData.append("image", image);

        setLoading(true);
        setMessage("");
        try {
            const res = await api.post("/predict", formData, { // Fixed to /ai/predict
                headers: {
                    "Content-Type": "multipart/form-data",
                    Authorization: `Bearer ${user.token}`,
                },
            });
            setResult(res.data);
            setPreviewUrl(null); // Update preview with backend URL
        } catch (err) {
            setMessage(err.response?.data?.error || "Prediction failed");
        } finally {
            setLoading(false);
        }
    };

    if (!user) {
        return (
            <section className="min-h-dvh w-full grid place-content-center">
                <p className="text-center">Please log in to upload an image.</p>
            </section>
        );
    }console.log(result)

    return (
        <section className="min-h-dvh w-full p-8 flex justify-center items-center ">
            <div className="p-6 bg-boston-blue-500/10 backdrop-blur-2xl  rounded-2xl shadow-md  transition-all  w-[400px] min-h-[500px] flex flex-col justify-start items-center gap-8">
                <Button className="flex justify-center items-center gap-4 w-full">

                <label htmlFor="image" className="text-2xl font-bold w-full text-boston-blue-700 mb-4 flex items-center justify-center">

                    <Upload /> <span>Scan Your Eye</span>
                </label>
                </Button>

                {
                    previewUrl && (
                        <div className="h-40 w-full  rounded-3xl overflow-hidden relative">
                            <img
                                src={previewUrl}
                                alt={`Diagnosis`}
                                className="bg-cover object-center w-full "
                            />

                        </div>
                    )
                }
                <form onSubmit={handleSubmit} className="space-y-4 w-full">
                    <div>
                        {/*<label className="block text-sm font-bold mb-2">Select Image</label>*/}
                        <Input
                            idInput="image"
                            type="file"
                            accept="image/*"
                            onChange={handleImageChange}
                            required
                            containerClassName="hidden"
                        />

                    </div>
                    <Button
                        type="submit"
                        disabled={loading}
                        className="w-full bg-boston-blue-700"
                    >
                        upload
                    </Button>
                </form>

                {message && (
                    <p className="text-red-400 mt-3 text-center">{message}</p>
                )}

                {result && (
                    <HistoryCard status={result.status} image_url={result.image_url}  percentage={result.percentage} />

                )}
            </div>
        </section>
    );
}
__________

File: src/app/history/page.jsx
------------------------
// src/app/history/page.jsx
"use client";

import { useState, useEffect } from "react";
import { useAuth } from "@/lib/context/auth";
import api from "@/lib/utils/api";
import Spinner from "@/components/ui/Spinner";
import HistoryCard from "@/components/HistoryCard";
import { Clock } from "lucide-react";

export default function History() {
  const [history, setHistory] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const { user } = useAuth(); // user includes token

  useEffect(() => {
    const fetchHistory = async () => {
      setLoading(true);
      setError(null);
      try {
        const res = await api.get("/history", { // Fixed to /ai/history
          headers: { Authorization: `Bearer ${user.token}` },
        });
        setHistory(res.data);
      } catch (err) {
        setError(err.response?.data?.msg || "Failed to fetch history");
      } finally {
        setLoading(false);
      }
    };
    if (user) fetchHistory();
  }, [user]);

  if (!user) {
    return (
        <section className="min-h-dvh w-full grid place-content-center">
          <p className="text-center">Please log in to view your history.</p>
        </section>
    );
  }

  if (loading) {
    return (
        <section className="min-h-dvh w-full grid place-content-center">
          <Spinner />
        </section>
    );
  }

  return (
      <section className="min-h-dvh w-full p-8 mt-32 flex flex-col items-center">
        <h2 className="text-2xl font-bold text-boston-blue-700 mb-6 flex items-center">
          <Clock className="mr-2" /> Diagnosis History
        </h2>
        {error && <p className="text-red-400 mb-4">{error}</p>}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 w-full max-w-5xl">
          {history.length > 0 ? (
              history.map((entry) => (
                  <HistoryCard
                      key={entry.id}
                      id={entry.id}
                      created_at={entry.created_at}
                      image_url={entry.image_url}
                      status={entry.status}
                      percentage={entry.percentage}
                  />
              ))
          ) : (
              <p className="text-center col-span-full">No history found.</p>
          )}
        </div>
      </section>
  );
}
__________

File: src/lib/context/auth.js
------------------------
import { createContext, useState, useContext } from 'react';

const AuthContext = createContext();

export function AuthProvider({ children }) {
    const [user, setUser] = useState(JSON.parse(localStorage.getItem('user')) || null);

    const login = (userData) => {
        setUser(userData);
        localStorage.setItem('user', JSON.stringify(userData));
    };

    const logout = () => {
        setUser(null);
        localStorage.removeItem('user');
    };

    return (
        <AuthContext.Provider value={{ user, login, logout }}>
            {children}
        </AuthContext.Provider>
    );
}

export const useAuth = () => useContext(AuthContext);
__________

File: src/lib/utils/api.js
------------------------
import axios from 'axios';

// src/lib/utils/api.js
const api = axios.create({
    baseURL: 'http://localhost:5000/api',
    headers: {
        "Content-Type": "application/json"
    }
});

// Add request interceptor
api.interceptors.request.use(config => {
        const token = localStorage.getItem('token');
        if (token) {
            config.headers.Authorization = `Bearer ${token}`;
        }
        return config},
    error => {
        return Promise.reject(error);
    }
);

export default api;
__________

File: src/lib/hooks/useDoctors.js
------------------------
// src/lib/hooks/useDoctors.js
"use client";
import { useState, useEffect, useCallback } from "react";
import api from "@/lib/utils/api";

export default function useDoctors(token) {
    const [doctors, setDoctors] = useState([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);

    const fetchDoctors = useCallback(async (state = "") => {
        setLoading(true);
        setError(null);
        try {
            const config = state ? { params: { state } } : {};
            const res = await api.get("/doctors", config);
            setDoctors(res.data);
        } catch (err) {
            setError(err.response?.data?.msg || "Failed to fetch doctors");
        } finally {
            setLoading(false);
        }
    }, []); // Empty deps since api is stable

    useEffect(() => {
        if (token) {
            fetchDoctors(); // Initial fetch for token-based contexts
        }
    }, [token, fetchDoctors]);

    return { doctors, loading, error, fetchDoctors };
}
__________

File: src/lib/hooks/useDoctorActions.js
------------------------
// src/lib/hooks/useDoctorActions.js
import api from "../utils/api";
import {useState} from "react";
export default function useDoctorActions(token) {
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);

    const createDoctor = async (doctorData) => {
        setLoading(true);
        setError(null);
        try {
            const res = await api.post("/doctors", doctorData, {
                headers: { Authorization: `Bearer ${token}` },
            });
            return { success: true, data: res.data };
        } catch (err) {
            setError(err.response?.data?.msg || "Failed to create doctor");
            return { success: false };
        } finally {
            setLoading(false);
        }
    };

    const updateDoctor = async (id, doctorData) => {
        setLoading(true);
        setError(null);
        try {
            const res = await api.put(`/doctors/${id}`, doctorData, {
                headers: { Authorization: `Bearer ${token}` },
            });
            return { success: true, data: res.data };
        } catch (err) {
            setError(err.response?.data?.msg || "Failed to update doctor");
            return { success: false };
        } finally {
            setLoading(false);
        }
    };

    const deleteDoctor = async (id) => {
        setLoading(true);
        setError(null);
        try {
            await api.delete(`/doctors/${id}`, {
                headers: { Authorization: `Bearer ${token}` },
            });
            return { success: true };
        } catch (err) {
            setError(err.response?.data?.msg || "Failed to delete doctor");
            return { success: false };
        } finally {
            setLoading(false);
        }
    };

    return { createDoctor, updateDoctor, deleteDoctor, loading, error };
}
__________

File: src/lib/actions/signInActions.js
------------------------
import api from '@/lib/utils/api';
export default async function signInActions({ email, password }) {
    try {
        const response = await api.post('/login', { email, password });
        return { success: true, data: response.data };
    } catch (error) {
        return { success: false, message: error.response?.data?.msg || 'Login failed' };
    }
}

__________

File: src/lib/actions/signupActions.js
------------------------
import api from '@/lib/utils/api';

export default async function signupActions({ firstName, lastName, email, password }) {
    try {
        const response = await api.post('/register', {
            first_name: firstName,
            last_name: lastName,
            email,
            password,
        });
        return { success: true, data: response.data };
    } catch (error) {
        return { success: false, message: error.response?.data?.msg || 'Signup failed' };
    }
}
__________

File: src/components/ui/Button.jsx
------------------------
import React from 'react';
import Spinner from "@/components/ui/Spinner";

function Button({ children, type = 'button', disabled = false,className ,...props } ) {
    return (
        <button
            type={type}
            disabled={disabled}
            className={` ${className} px-4 py-2 min-h-4 flex justify-center items-center  rounded-2xl uppercase text-md font-extrabold  disabled:bg-boston-blue-950 border-2 border-boston-blue-700 hover:bg-boston-blue-400 transition-[background] duration-500 ease-in-out cursor-pointer`}
            {...props}
        >
            {disabled ? <Spinner/> : children}
        </button>
    );
}

export default Button;
__________

File: src/components/ui/ThemeSwitch.jsx
------------------------
"use client";
import { useTheme } from "next-themes";
import { SunMedium, Moon } from "lucide-react";
import { useState, useEffect } from "react";

export default function ThemeSwitch() {
    const { resolvedTheme, setTheme } = useTheme();
    const [mounted, setMounted] = useState(false);

    // Wait until mounted to avoid SSR hydration issues
    useEffect(() => {
        setMounted(true);
    }, []);

    if (!mounted) return null;

    const toggleTheme = () => {
        setTheme(resolvedTheme === "dark" ? "light" : "dark");
    };

    return resolvedTheme === "dark" ? (
        <SunMedium
            size={24}
            className="text-customOrange hidden md:block cursor-pointer"
            onClick={toggleTheme}
            title="Switch to Light Mode"
        />
    ) : (
        <Moon
            size={24}
            className="hidden md:block cursor-pointer"
            onClick={toggleTheme}
            title="Switch to Dark Mode"
        />
    );
}

__________

File: src/components/ui/Logo.jsx
------------------------
import Link from "next/link";
import { View } from "lucide-react";

export default  function Logo({ className  , textSize="text-2xl"}){
    return (
        <Link href="/" id="brand" className={`flex  font-agency uppercase font-bold  items-center  gap-1 ${className} ${textSize}`}>
            <View  className="text-boston-blue-200"/>
            <span>Cataract</span>
        </Link>
    )
}
__________

File: src/components/ui/Input.jsx
------------------------
"use client";
import React from "react";
import Button from "@/components/ui/Button";

export default function Input({
  icon: Icon,
  onIconClick,
  type = "text",
  placeholder,
  value,
  onChange,
    idInput,
  required = false,
  inputClassName = "",
  containerClassName = "",
  ...rest
}) {
  return (
    <div
      className={`flex justify-between items-center px-4 py-2  rounded-2xl border-2 border-boston-blue-700  hover:bg-boston-blue-400/60  ${containerClassName}`}
    >
      {Icon && (
        <label  htmlFor={idInput}
               className=" uppercase text-md font-extrabold   cursor-pointer"

        >
          <Icon size={34} />
        </label>
      )}
      <input
          id={idInput}
        type={type}
        placeholder={placeholder}
        value={value}
        onChange={onChange}
        required={required}
        className={`w-full p-3  outline-none focus:outline-none ${inputClassName}`}
        {...rest}
      />
    </div>
  );
}

__________

File: src/components/ui/Spinner.jsx
------------------------
export default function Spinner({ size = "sm" }) {
    return (
        <div className={`animate-spin ${size === "sm" ? "h-4 w-4" : "h-5 w-5"}`}>
            <svg className="h-full w-full" viewBox="0 0 24 24">
                <circle
                    className="opacity-25"
                    cx="12"
                    cy="12"
                    r="10"
                    stroke="currentColor"
                    strokeWidth="4"
                    fill="none"
                />
                <path
                    className="opacity-75"
                    fill="currentColor"
                    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                />
            </svg>
        </div>
    );
}
__________

File: src/components/Navbar.jsx
------------------------
// src/components/Navbar.jsx
"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";
import ThemeSwitch from "@/components/ui/ThemeSwitch";
import Logo from "@/components/ui/Logo";
import Button from "@/components/ui/Button";
import { useAuth } from "@/lib/context/auth";

export default function Navbar() {
    const pathname = usePathname();
    const { user, logout } = useAuth();

    // Define role-specific navigation links
    const patientLinks = [
        { url: "/", label: "home" },
        { url: "/search", label: "search" },
        { url: "/scan", label: "scan" },
        { url: "/history", label: "history" },
    ];

    const doctorLinks = [
        { url: "/", label: "home" },
        { url: "/search", label: "search" },
        { url: "/doctors", label: "doctors" },
    ];

    const adminLinks = [
        { url: "/", label: "home" },
        { url: "/search", label: "search" },
        { url: "/dashboard", label: "dashboard" },
    ];

    // Default links for unauthenticated users
    const defaultLinks = [{ url: "/", label: "home" }];

    // Determine which links to use based on user role
    const navLinks = user
        ? user.role === "patient"
            ? patientLinks
            : user.role === "doctor"
                ? doctorLinks
                : user.role === "admin"
                    ? adminLinks
                    : defaultLinks // Fallback for unexpected roles
        : defaultLinks; // Unauthenticated users

    return (
        <div
            className={`fixed inset-x-0 top-2 z-50 h-16 border-none transition-all duration-700 sm:inset-x-6`}
        >
            <header className="absolute top-1/2 py-2 w-[90dvw] -translate-y-1/2 flex justify-between items-center mx-4 md:mx-14 backdrop-blur-md px-4 rounded-2xl">
                <Logo />
                <nav id="navbar-items" className="w-full">
                    <ul className="flex justify-center items-center gap-4">
                        {navLinks.map(({ url, label }) => (
                            <li
                                key={label}
                                className={`relative after:absolute after:bottom-0 after:left-0 after:right-0 after:mx-auto after:h-px after:z-10 after:bg-boston-blue-500 after:w-0 hover:after:w-full after:transition-all after:duration-500 after:ease-in-out py-1 ${
                                    pathname === url ? "after:w-full font-extrabold" : ""
                                }`}
                            >
                                <Link href={url} className="px-4 py-2 text-lg uppercase">
                                    {label}
                                </Link>
                            </li>
                        ))}
                    </ul>
                </nav>
                <div
                    id="navbar-contoler"
                    className="flex justify-center items-center gap-4"
                >
                    <ThemeSwitch />
                    {user ? (
                        <Button onClick={logout}>Logout</Button>
                    ) : (
                        <Link href="/signin">
                            <Button >SignIn</Button>
                        </Link>
                    )}
                </div>
            </header>
        </div>
    );
}
__________

File: src/components/DoctorModal.jsx
------------------------
// src/components/DoctorModal.jsx
"use client"
import { useState, useEffect } from "react";
import Button from "@/components/ui/Button";
import Input from "@/components/ui/Input";
import useDoctorActions from "@/lib/hooks/useDoctorActions";

export default function DoctorModal({ show, onHide, onSave, doctor, token }) {
    const { createDoctor, updateDoctor, loading, error } = useDoctorActions(token);

    const [formData, setFormData] = useState({
        first_name: "",
        last_name: "",
        email: "",
        password: "",
        profile: {
            qualification: "",
            about: "",
            state: "",
            url_picture_profile: "",
            url_whatsapp: "",
            url_facebook: "",
            url_instagram: "",
            url_website: ""
        }
    });

    useEffect(() => {
        if (doctor) {
            setFormData({
                first_name: doctor.first_name,
                last_name: doctor.last_name,
                email: doctor.email,
                password: "", // Keep password empty for edits
                profile: {
                    qualification: doctor.profile?.qualification ,
                    about: doctor.profile?.about ,
                    state: doctor.profile?.state ,
                    url_picture_profile: doctor.profile?.url_picture_profile,
                    url_whatsapp: doctor.profile?.url_whatsapp ,
                    url_facebook: doctor.profile?.url_facebook ,
                    url_instagram: doctor.profile?.url_instagram ,
                    url_website: doctor.profile?.url_website
                }
            });
        }
    }, [doctor]);

    const handleSubmit = async (e) => {
        e.preventDefault();
        const payload = {
            first_name: formData.first_name,
            last_name: formData.last_name,
            email: formData.email,
            password: formData.password,
            profile: {
                about: formData.profile.about,
                qualification: formData.profile.qualification,
                state: formData.profile.state,
                url_picture_profile: formData.profile.url_picture_profile,
                url_whatsapp: formData.profile.url_whatsapp,
                url_facebook: formData.profile.url_facebook,
                url_instagram: formData.profile.url_instagram,
                url_website: formData.profile.url_website
            }
        };
        payload.profile = Object.fromEntries(
            Object.entries(payload.profile).filter(([_, v]) => v !== '')
        );
        let result;
        if (doctor) {
            result = await updateDoctor(doctor.id, payload);
        } else {
            result = await createDoctor(payload);
        }

        if (result.success) {
            onSave();
            onHide();
        }
    };

    const handleProfileChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            profile: {
                ...prev.profile,
                [name]: value
            }
        }));
    };

    const handleUserChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: value
        }));
    };

    if (!show) return null;

    return (
        <div className="fixed inset-0 bg-black/20 backdrop-blur-lg bg-opacity-50 flex justify-center items-center z-50">
            <div className="p-6 rounded-3xl w-[90%] max-w-2xl backdrop-blur-lg border-2 border-boston-blue-500">
                <h3 className="text-xl font-bold mb-4">
                    {doctor ? "Edit Doctor" : "Add Doctor"}
                </h3>
                <form onSubmit={handleSubmit} className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {/* Basic Info Column */}
                    <div className="space-y-3">
                        <Input
                            idInput="first_name"
                            type="text"
                            name="first_name"
                            placeholder="First Name"
                            value={formData.first_name}
                            onChange={handleUserChange}
                            required
                        />
                        <Input
                            idInput="last_name"
                            type="text"
                            name="last_name"
                            placeholder="Last Name"
                            value={formData.last_name}
                            onChange={handleUserChange}
                            required
                        />
                        <Input
                            idInput="email"
                            type="email"
                            name="email"
                            placeholder="Email"
                            value={formData.email}
                            onChange={handleUserChange}
                            required
                        />
                        {!doctor && (
                            <Input
                                idInput="password"
                                type="password"
                                name="password"
                                placeholder="Password"
                                value={formData.password}
                                onChange={handleUserChange}
                                required
                            />
                        )}
                    </div>

                    {/* Profile Info Column */}
                    <div className="space-y-3">
                        <Input
                            idInput="qualification"
                            type="text"
                            name="qualification"
                            placeholder="Qualification"
                            value={formData.profile.qualification}
                            onChange={handleProfileChange}
                        />
                        <Input
                            idInput="state"
                            type="text"
                            name="state"
                            placeholder="State"
                            value={formData.profile.state}
                            onChange={handleProfileChange}
                        />
                        <Input
                            idInput="about"
                            type="text"
                            name="about"
                            placeholder="About"
                            value={formData.profile.about}
                            onChange={handleProfileChange}
                        />
                        <Input
                            idInput="url_picture_profile"
                            type="url"
                            name="url_picture_profile"
                            placeholder="Profile Picture URL"
                            value={formData.profile.url_picture_profile}
                            onChange={handleProfileChange}
                        />
                        <Input
                            idInput="url_whatsapp"
                            type="url"
                            name="url_whatsapp"
                            placeholder="WhatsApp URL"
                            value={formData.profile.url_whatsapp}
                            onChange={handleProfileChange}
                        />
                        <Input
                            idInput="url_facebook"
                            type="url"
                            name="url_facebook"
                            placeholder="Facebook URL"
                            value={formData.profile.url_facebook}
                            onChange={handleProfileChange}
                        />
                        <Input
                            idInput="url_instagram"
                            type="url"
                            name="url_instagram"
                            placeholder="Instagram URL"
                            value={formData.profile.url_instagram}
                            onChange={handleProfileChange}
                        />
                        <Input
                            idInput="url_website"
                            type="url"
                            name="url_website"
                            placeholder="Website URL"
                            value={formData.profile.url_website}
                            onChange={handleProfileChange}
                        />
                    </div>

                    {error && <p className="text-red-400 col-span-full">{error}</p>}
                    <div className="flex gap-2 col-span-full">
                        <Button
                            type="submit"
                            disabled={loading}
                            className="w-full bg-boston-blue-700"
                        >
                            {loading ? "Saving..." : doctor ? "Update" : "Add"}
                        </Button>
                        <Button onClick={onHide} className="w-full" disabled={loading}>
                            Cancel
                        </Button>
                    </div>
                </form>
            </div>
        </div>
    );
}
__________

File: src/components/DoctorCard.jsx
------------------------
"use client";
import { useRouter } from "next/navigation"; // for Next.js 13 app directory
import Link from "next/link";

export default function DoctorCard({ doctor }) {
    const router = useRouter();

    return (
        <div
            onClick={() => router.push(`/doctors/${doctor.id}`)}
            className="p-4 bg-boston-blue-500/10 backdrop-blur-2xl rounded-2xl shadow-md transition-all cursor-pointer"
        >
            <div className="flex items-center gap-4">
                {doctor.profile?.url_picture_profile ? (
                    <img
                        src={doctor.profile.url_picture_profile}
                        alt={`${doctor.first_name} ${doctor.last_name}`}
                        className="w-16 h-16 rounded-full object-cover"
                    />
                ) : (
                    <div className="w-16 h-16 rounded-full bg-boston-blue-200 flex items-center justify-center text-white font-bold">
                        {doctor.first_name[0]}{doctor.last_name[0]}
                    </div>
                )}
                <div>
                    <h3 className="text-lg font-bold text-boston-blue-700">
                        {doctor.first_name} {doctor.last_name}
                    </h3>
                    <p className="text-sm">{doctor.profile?.state || "N/A"}</p>
                </div>
            </div>
            <div className="mt-2">
                <p>
                    <strong>About:</strong> {doctor.profile?.about || "N/A"}
                </p>
                <p>
                    <strong>Qualification:</strong> {doctor.profile?.qualification || "N/A"}
                </p>
                {doctor.profile?.url_whatsapp && (
                    <p>
                        <strong>WhatsApp:</strong>{" "}
                        <Link
                            href={doctor.profile.url_whatsapp}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="text-boston-blue-700 underline"
                        >
                            Contact
                        </Link>
                    </p>
                )}
            </div>
        </div>
    );
}

__________

File: src/components/Footer.jsx
------------------------
// src/components/Footer.jsx
import React from "react";
import Link from "next/link";
import { Facebook, Instagram, MessageCircle, Globe } from "lucide-react";

export default function Footer() {
    return (
        <footer className="bg-boston-blue-700 text-white p-6 mt-8">
            <div className="container mx-auto flex flex-col md:flex-row justify-between items-center gap-6">
                {/* Copyright and Developer Info */}
                <div className="text-center md:text-left">
                    <p className="text-sm">&copy; {new Date().getFullYear()} EyeCare. All rights reserved.</p>
                    <p className="text-xs mt-1 opacity-80">
                        Developed by{" "}
                        <Link
                            href="https://futureacademy.com" // Replace with actual URL if available
                            target="_blank"
                            rel="noopener noreferrer"
                            className="hover:underline"
                        >
                            Future Academy Team
                        </Link>
                    </p>
                </div>

                {/* Social Media Links */}
                <div className="flex justify-center items-center gap-4">
                    <Link
                        href="https://wa.me/123456789" // Replace with actual WhatsApp link
                        target="_blank"
                        rel="noopener noreferrer"
                        className="hover:text-boston-blue-300 transition-colors"
                        aria-label="WhatsApp"
                    >
                        <MessageCircle size={24} />
                    </Link>
                    <Link
                        href="https://facebook.com/eyecare" // Replace with actual Facebook link
                        target="_blank"
                        rel="noopener noreferrer"
                        className="hover:text-boston-blue-300 transition-colors"
                        aria-label="Facebook"
                    >
                        <Facebook size={24} />
                    </Link>
                    <Link
                        href="https://instagram.com/eyecare" // Replace with actual Instagram link
                        target="_blank"
                        rel="noopener noreferrer"
                        className="hover:text-boston-blue-300 transition-colors"
                        aria-label="Instagram"
                    >
                        <Instagram size={24} />
                    </Link>
                    <Link
                        href="https://eyecare.com" // Replace with actual website link
                        target="_blank"
                        rel="noopener noreferrer"
                        className="hover:text-boston-blue-300 transition-colors"
                        aria-label="Website"
                    >
                        <Globe size={24} />
                    </Link>
                </div>
            </div>
        </footer>
    );
}
__________

File: src/components/HistoryCard.jsx
------------------------
// src/components/HistoryCard.jsx
export default function HistoryCard({ id, created_at, image_url, status, percentage }) {
    return (
        <div
            className="p-4 bg-boston-blue-500/10 backdrop-blur-2xl rounded-2xl shadow-md transition-all"
        >
            <div className="h-40 w-full aspect-video mb-5 rounded-3xl overflow-hidden relative">
                <img
                    src={image_url}
                    alt={`Diagnosis ${id}`}
                    className="w-full h-full object-cover object-center" // Fixed bg-cover to proper Tailwind
                />
                <span className="absolute top-2 left-2 bg-boston-blue-800 text-white rounded-3xl px-2 py-1 font-extrabold">
          {created_at ? new Date(created_at).toLocaleDateString() : new Date(Date.now()).toLocaleDateString()}
        </span>
            </div>
            <div className="space-y-2 flex flex-col justify-start items-start gap-4 relative">
        <span
            className={`${
                status === "Normal" ? "bg-boston-blue-800" : "bg-red-800"
            } text-white rounded-3xl px-4 py-1 font-extrabold`}
        >
          {status}
        </span>
                <div className="flex justify-start items-start gap-4 w-full">
                    <p className="text-sm w-full">
                        {status}:{" "}
                        {status === "Normal" ? percentage : (1 - percentage / 100) * 100}%
                    </p>
                    <div className="w-full bg-gray-200 rounded-full h-2.5 mt-1">
                        <div
                            className={`h-2.5 rounded-full ${
                                status === "Normal" ? "bg-boston-blue-500" : "bg-red-500"
                            }`}
                            style={{
                                width: `${
                                    status === "Normal" ? percentage : (1 - percentage / 100) * 100
                                }%`,
                            }}
                        ></div>
                    </div>
                </div>
            </div>
        </div>
    );
}
__________

